.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "EGW2FBOX 1"
.TH EGW2FBOX 1 "2011-05-06" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
egw2fbox.pl
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBThis program\fR reads phone numbers and e\-mail addresses from the eGroupware database table 'contacts' and exports them to other clients.
.PP
Currently supported clients are:
.IP "phone numbers:" 3
.IX Item "phone numbers:"
\&\- Fritz Box router address book
.IP "e\-mail addresses:" 3
.IX Item "e-mail addresses:"
\&\- Round Cube web mailer including personal and global address book
.Sp
\&\- \s-1MUTT\s0 command line mail client
.PP
For uploading the created \s-1XML\s0 address book to a Fritz Box a small perl script called FritzUploader from Jan-Piet Mens is used.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
egw2fbox.pl [\-\-verbose] [\-v] [\-\-config filename.ini] [\-c filename.ini] [\-\-version] [\-\-help] [\-h] [\-?] [\-\-man] [\-\-changelog]
.SH "OPTIONS"
.IX Header "OPTIONS"
Runtime:
.IP "\-\-verbose \-v" 15
.IX Item "--verbose -v"
Logs to \s-1STDOUT\s0 while executing the script.
.IP "\-\-config filename.ini   \-c filename.ini" 15
.IX Item "--config filename.ini   -c filename.ini"
File name containing all configuration.
.Sp
See sections \s-1CONFIG\s0 \s-1FILE\s0 and \s-1TUTORIALS\s0 for further information.
.PP
Documentation:
.IP "\-\-version" 15
.IX Item "--version"
Prints the version numbers.
.IP "\-\-help \-h \-?" 15
.IX Item "--help -h -?"
Print a brief help message.
.IP "\-\-man" 15
.IX Item "--man"
Prints the complete manual page.
.IP "\-\-changelog" 15
.IX Item "--changelog"
Prints the change log.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2011 by Christian Anton <mail@christiananton.de>, Kai Ellinger <coding@blicke.de>
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
\&\s-1MA\s0 02110\-1301, \s-1USA\s0.
.SH "HISTORY"
.IX Header "HISTORY"
.Vb 3
\& 0.08.01 2011\-05\-05 Kai Ellinger <coding@blicke.de>
\&       Documentation:
\&       \- Finished API docs
\&
\& 0.08.00 2011\-04\-05 Kai Ellinger <coding@blicke.de>
\&       Documentation:
\&       \- Started implementing the documentation via perlpod
\&       \- Implemented command line options:
\&         [\-\-version] [\-\-help] [\-h] [\-?] [\-\-man] [\-\-changelog]
\&
\& 0.07.01 2011\-03\-30 Kai Ellinger <coding@blicke.de>
\&       Round Cube DB:
\&       \- Fixed bug that not set value for \*(Aqemail\*(Aq, \*(Aqname\*(Aq, \*(Aqfirstname\*(Aq or \*(Aqsurname\*(Aq 
\&         column causes SQL errors. \*(Aqemail\*(Aq, \*(Aqname\*(Aq, \*(Aqfirstname\*(Aq will never be NULL
\&         due to the implementation. But \*(Aqsurname\*(Aq might.
\&       \- Checking $userId, $changed and $sth as well
\&       \- Don\*(Aqt let the whole script fail if $userId or $sth is NULL. Only roll back 
\&         the Round Cube DB transaction!
\&
\& 0.07.00 2011\-03\-29 Kai Ellinger <coding@blicke.de>
\&       \- Lazy Update implemented
\&       \- Implemented dedicated EGW user lists FBOX_EGW_ADDRBOOK_OWNERS, RCUBE_EGW_ADDRBOOK_OWNERS, MUTT_EGW_ADDRBOOK_OWNERS
\&         in addition to already existing global EGW user list EGW_ADDRBOOK_OWNERS
\&
\& 0.06.00 2011\-03\-28 Kai Ellinger <coding@blicke.de>
\&       RoundCube:
\&       \- It turned out that the current state of the implementation already 
\&         supports global address books in Round Cube. Successfully tested!
\&       \- You need to install the Round Cube plug in \*(Aqglobaladdressbook\*(Aq first.
\&         Download: http://trac.roundcube.net/wiki/Plugin_Repository
\&
\&       Cronjob.sh:
\&       \- Moving hard coded variables from cronjob.sh to egw2fbox.conf:
\&          * CRON_FBOX_XML_HASH, CRON_FBOX_UPLOAD_SCRIPT
\&       \- Added comment awareness of config file parser in cronjob.sh
\&
\&       Update clients only if EGW contacts changed for defined EGW user:
\&       \- Preparation of egw2fbox.conf for lazy update feature:
\&          * EGW_LAZY_UPDATE_TIME_STAMP_FILE, FBOX_LAZY_UPDATE, RCUBE_LAZY_UPDATE, MUTT_LAZY_UPDATE
\&
\&       Allow defining a different EGW user list for each client:
\&       \- Preparation of egw2fbox.conf for defining different EGW address book owners per each client
\&          * FBOX_EGW_ADDRBOOK_OWNERS, RCUBE_EGW_ADDRBOOK_OWNERS, MUTT_EGW_ADDRBOOK_OWNERS
\&
\& 0.05.04 2011\-03\-28 Kai Ellinger <coding@blicke.de>
\&       \- Removing need for $egw_address_data being an global variable to be able to 
\&         sync different user / group address books for different clients
\&       \- Making egw_read_db() flexible to return addresses for different address book owners
\&       \- Caching EGW addresses to avoid DB access
\&       \- egw_read_db() now retuning last modified time stamp to stop writing data to external
\&         client if not modified since last run, if MAIN calling export routine supports this
\&
\& 0.05.03 2011\-03\-10 Kai Ellinger <coding@blicke.de>
\&       \- implemented SQL part of round cube address book sync but
\&         still check field size before inserting into DB needs tbd
\&
\& 0.05.02 2011\-03\-08 Kai Ellinger <coding@blicke.de>
\&       \- started implementing round cube address book sync because I feel it is urgent ;\-)
\&         did not touch any SQL code, need to update all TO DOs with inserting SQL code
\&       \- remove need for $FRITZXML being a global variable
\&
\& 0.05.01 2011\-03\-04 Christian Anton <mail@christiananton.de>
\&       \- tidy up code to fulfill Perl::Critic tests at "gentle" severity:
\&       http://www.perlcritic.org/
\&
\& 0.05.00 2011\-03\-04 Christian Anton <mail@christiananton.de>, Kai Ellinger <coding@blicke.de>
\&       \- data is requested from DB in UTF8 and explicitly converted in desired encoding
\&         inside of fbox_write_xml_contact function
\&       \- mutt export function now writes aliases file in UTF\-8 now. If you use anything
\&         different \- you\*(Aqre wrong!
\&       \- fixed bug: for private contact entries in FritzBox the home number was taken from
\&         database field tel_work instead of tel_home
\&       \- extended fbox_reformatTelNr to support local phone number annotation to work around
\&         inability of FritzBox to rewrite phone number for incoming calls
\&
\& 0.04.00 2011\-03\-02 Kai Ellinger <coding@blicke.de>
\&       \- added support for mutt address book including an example file showing 
\&         how to configure ~/.muttrc to support a local address book and a global
\&         EGW address book
\&       \- replaced time stamp in fritz box xml with real time stamp from database
\&         this feature is more interesting for round cube integration where we have
\&         a time stamp field in the round cube database
\&       \- added some comments
\&
\& 0.03.00 2011\-02\-26 Kai Ellinger <coding@blicke.de>
\&       \- Verbose function:
\&          * only prints if data was provided
\&          * avoiding unnecessary verbose function calls
\&          * avoiding runtime errors due to uninitialized data in verbose mode
\&       \- Respect that Fritzbox address book names can only have 25 characters
\&       \- EGW address book to Fritz Box phone book mapping:
\&         The Fritz Box Phone book knows 3 different telephone number types:
\&           \*(Aqwork\*(Aq, \*(Aqhome\*(Aq and \*(Aqmobile\*(Aq
\&         Each Fritz Box phone book entry can have up to 3 phone numbers.
\&         All 1\-3 phone numbers can be of same type or different types.
\&         * Compact mode (if one EGW address has 1\-3 phone numbers):
\&            EGW field tel_work          \-> FritzBox field type \*(Aqwork\*(Aq
\&            EGW field tel_cell          \-> FritzBox field type \*(Aqmobile\*(Aq
\&            EGW field tel_assistent     \-> FritzBox field type \*(Aqwork\*(Aq
\&            EGW field tel_home          \-> FritzBox field type \*(Aqhome\*(Aq
\&            EGW field tel_cell_private  \-> FritzBox field type \*(Aqmobile\*(Aq
\&            EGW field tel_other         \-> FritzBox field type \*(Aqhome\*(Aq
\&           NOTE: Because we only have 3 phone numbers, we stick on the right number types.
\&         * Business Fritz Box phone book entry (>3 phone numbers):
\&            EGW field tel_work          \-> FritzBox field type \*(Aqwork\*(Aq
\&            EGW field tel_cell          \-> FritzBox field type \*(Aqmobile\*(Aq
\&            EGW field tel_assistent     \-> FritzBox field type \*(Aqhome\*(Aq
\&           NOTE: On hand sets, the list order is work, mobile, home. That\*(Aqs why the
\&                 most important number is \*(Aqwork\*(Aq and the less important is \*(Aqhome\*(Aq here.
\&         * Private Fritz Box phone book entry (>3 phone numbers):
\&            EGW field tel_home          \-> FritzBox field type \*(Aqwork\*(Aq
\&            EGW field tel_cell_private  \-> FritzBox field type \*(Aqmobile\*(Aq
\&            EGW field tel_other         \-> FritzBox field type \*(Aqhome\*(Aq
\&           NOTE: On hand sets, the list order is work, mobile, home. That\*(Aqs why the
\&                 most important number is \*(Aqwork\*(Aq and the less important is \*(Aqhome\*(Aq here.
\&        \- Added EGW DB connect string check
\&        \- All EGW functions have now prefix \*(Aqegw_\*(Aq, all Fritz Box functions prefix
\&          \*(Aqfbox_\*(Aq and all Round Cube functions \*(Aqrcube_\*(Aq to prepare the source for
\&          adding the round cube sync.
\&
\& 0.02.00 2011\-02\-25 Christian Anton <mail@christiananton.de>
\&          implementing XML\-write as an extra function and implementing COMPACT_MODE which
\&          omits creating two contact entries for contacts which have only up to three numbers
\&
\& 0.01.00 2011\-02\-24 Kai Ellinger <coding@blicke.de>, Christian Anton <mail@christiananton.de>
\&          Initial version of this script, ready for world domination ;\-)
.Ve
.SH "API"
.IX Header "API"
.Sh "Required Perl modules"
.IX Subsection "Required Perl modules"
Most Perl modules used by this program are part of the standard perl library perlmodlib <http://perldoc.perl.org/perlmodlib.html> and are installed by default.
.PP
The only modules that might not be available by default are to access the MySQL database and are named \s-1DBI\s0 and DBD::Mysql.
.Sh "Function check_args ()"
.IX Subsection "Function check_args ()"
This function is checking command line options and printing help messages if requested.
.PP
\&\s-1IN:\s0 No parameter
.PP
\&\s-1OUT:\s0 Returns nothing
.Sh "Function parse_config ()"
.IX Subsection "Function parse_config ()"
This function is parsing the config file given by command line option '\-c filename.ini'.
.PP
\&\s-1IN:\s0 No parameter
.PP
\&\s-1OUT:\s0 Returns nothing
.Sh "Function verbose (\s-1STRING\s0 message)"
.IX Subsection "Function verbose (STRING message)"
Printing out verbose messages if verbose mode is enabled.
.PP
\&\s-1IN:\s0 Takes the message to print out
.PP
\&\s-1OUT:\s0 Returns nothing
.Sh "Function sort_user_id_list (\s-1STRING\s0 user_id_list)"
.IX Subsection "Function sort_user_id_list (STRING user_id_list)"
This function is called by function find_EGW_user (\s-1STRING\s0 user_id_list) to sort 
the user list it looked up before.
.PP
This is needed to avoid unnecessary database accesses even the config parameters \s-1EGW_ADDRBOOK_OWNERS\s0, 
\&\s-1FBOX_EGW_ADDRBOOK_OWNERS\s0, \s-1RCUBE_EGW_ADDRBOOK_OWNERS\s0 and \s-1MUTT_EGW_ADDRBOOK_OWNERS\s0 list 
the user ids in different order and with different wide spaces.
.PP
The default Perl sort algorithm is used even if it is not a numeric algorithm. But this is not needed anyway.
.PP
\&\s-1IN:\s0 Takes an unsorted user id list string
.PP
\&\s-1OUT:\s0 Returns a sorted user id list string
.Sh "Function find_EGW_user (\s-1STRING\s0 config_parameter)"
.IX Subsection "Function find_EGW_user (STRING config_parameter)"
This function returns a sorted user id list string that is either defined by the global 
configuration parameter \s-1EGW_ADDRBOOK_OWNERS\s0 or one of the parameters
\&\s-1FBOX_EGW_ADDRBOOK_OWNERS\s0, \s-1RCUBE_EGW_ADDRBOOK_OWNERS\s0 and \s-1MUTT_EGW_ADDRBOOK_OWNERS\s0
to overwrite the global parameter.
.PP
\&\s-1IN:\s0 Config parameter name \s-1FBOX_EGW_ADDRBOOK_OWNERS\s0, \s-1RCUBE_EGW_ADDRBOOK_OWNERS\s0 or \s-1MUTT_EGW_ADDRBOOK_OWNERS\s0
.PP
\&\s-1OUT:\s0 Returns a sorted user id list string
.Sh "Function egw_read_db (\s-1STRING\s0 user_id_list)"
.IX Subsection "Function egw_read_db (STRING user_id_list)"
Connects to eGroupware database and looks up address book values for the given user id list including time stamp of last change.
.PP
\&\s-1IN:\s0 User id list to lookup
.PP
\&\s-1OUT:\s0 Returns two parameters:
.PP
\&\- all address data belonging to the user list
.PP
\&\- the time stamp when this list was modified the last time
.Sh "Function fbox_reformatTelNr (\s-1STRING\s0 phone_number)"
.IX Subsection "Function fbox_reformatTelNr (STRING phone_number)"
This is a helper function called by function fbox_write_xml_contact format the phone number in a way that the Fritz Box can resolve it.
How the phone number is formatted exactly is defined in the fritz box configuration section of the config file.
.PP
First, each phone number is re-formatted like 00498912345678. Later the phone numbers with the same country code or with the same area code 
get the leading numbers removed if configured.
.PP
This is needed because the Fritz Box can not recognize that phone number 00498912345678 is the same as 08912345678 calling from the 
same country is the same as 12345678 calling from the same city. But the right phone number syntax is very important to get the names 
resolved for incoming calls as well as to replace the phone numbers with the names in the phone call protocols maintain
that can either be viewed via web console or mail. Same is true for the incoming mail box calls that can be forwarded via e\-mail as well.
.PP
\&\s-1IN:\s0 Phone number in any format it can exist in eGrouware
.PP
\&\s-1OUT:\s0 Phone number formatted in a way that the Fritz Box can resolve incoming calls correctly
.Sh "Function fbox_write_xml_contact (\s-1HANDLE\s0 xml_file, \s-1STRING\s0 contact_name, \s-1STRING\s0 contact_name_suffix, \s-1ARRAY\s0 \s-1REF\s0 phone_numbers, \s-1NUMBER\s0 timestamp)"
.IX Subsection "Function fbox_write_xml_contact (HANDLE xml_file, STRING contact_name, STRING contact_name_suffix, ARRAY REF phone_numbers, NUMBER timestamp)"
This is a function called by function fbox_gen_fritz_xml for each single contact that needs to be written to the 
\&\s-1XML\s0 file. The contact name is formatted to fit into the restrictions of  the Fritz Box and the phones connected to it.
.PP
\&\s-1IN:\s0
.PP
\&\- handle for \s-1XML\s0 file
.PP
\&\- contact_name
.PP
\&\- contact_name_suffix = shift;
.PP
\&\- array ref with all phone numbers
.PP
\&\- timestamp of last update in eGroupware \s-1DB\s0
.PP
\&\s-1OUT:\s0 Nothing
.Sh "Function fbox_count_contacts_numbers (\s-1HASH\s0 \s-1REF\s0 egw_address_data, \s-1STRING\s0 key_to_search)"
.IX Subsection "Function fbox_count_contacts_numbers (HASH REF egw_address_data, STRING key_to_search)"
This is a function called by function fbox_gen_fritz_xml for each single contact found in the eGroupware address book to 
know how many phone numbers this contact has. If there are no phone numbers, this contact must not imported to the Fritz Box.
If there are more than 3 phone numbers, the contact must be split into a business contact and a private contact because
the Fritz Box can only hold 3 phone numbers per contact.
.PP
\&\s-1IN:\s0
.PP
\&\- \s-1HASH\s0 \s-1REF\s0 the address list to search
.PP
\&\- \s-1STRING\s0 key of the address that needs to be searched from the list
.PP
\&\s-1OUT:\s0 \s-1NUMBER\s0 count of found phone numbers
.Sh "Function fbox_gen_fritz_xml (\s-1HASH\s0 \s-1REF\s0 egw_address_data)"
.IX Subsection "Function fbox_gen_fritz_xml (HASH REF egw_address_data)"
This function creates the \s-1XML\s0 file to upload to the Fritz Box.
.PP
\&\s-1IN:\s0 \s-1HASH\s0 \s-1REF\s0 the address list
.PP
\&\s-1OUT:\s0 Nothing
.Sh "Function rcube_update_address_book (\s-1HASH\s0 \s-1REF\s0 egw_address_data)"
.IX Subsection "Function rcube_update_address_book (HASH REF egw_address_data)"
This function the Round Cube database with names and e\-mail addresses of the 
\&\s-1EGW\s0 address book by deleting the whole contacts table for the configured user 
and inserting each contact again. If there is any error, the whole \s-1DB\s0 transaction
is rolled back.
.PP
\&\s-1IN:\s0 \s-1HASH\s0 \s-1REF\s0 the address list
.PP
\&\s-1OUT:\s0 Nothing
.Sh "Function rcube_insert_mail_address (\s-1HANDLE\s0 sql_statement_handle, \s-1STRING\s0 email, \s-1STRING\s0 name, \s-1STRING\s0 first_name, \s-1STRING\s0 family_name, \s-1NUMBER\s0 timestamp)"
.IX Subsection "Function rcube_insert_mail_address (HANDLE sql_statement_handle, STRING email, STRING name, STRING first_name, STRING family_name, NUMBER timestamp)"
Helper function called by function rcube_update_address_book.
.PP
Executes an \s-1INSERT\s0 statement per each e\-mail address.
.PP
\&\s-1IN:\s0
.PP
\&\- handle for \s-1SQL\s0 statement
.PP
\&\- email address
.PP
\&\- full name
.PP
\&\- first name
.PP
\&\- family name
.PP
\&\- changed time stamp from \s-1EGW\s0 database
.PP
\&\s-1OUT:\s0 Nothing
.Sh "Function mutt_update_address_book (\s-1HASH\s0 \s-1REF\s0 egw_address_data)"
.IX Subsection "Function mutt_update_address_book (HASH REF egw_address_data)"
This function creates a \s-1TXT\s0 file to be used as \s-1MUTT\s0 address book.
.PP
\&\s-1IN:\s0 \s-1HASH\s0 \s-1REF\s0 the address list
.PP
\&\s-1OUT:\s0 Nothing
.Sh "\s-1MAIN\s0"
.IX Subsection "MAIN"
Function check_args () and parse_config () are called to load the configuration before reading 
the \s-1EGW\s0 database and creating address books for FritzBox, Round Cube and \s-1MUTT\s0 function creates 
a \s-1TXT\s0 file to be used as \s-1MUTT\s0 address book.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
\&\- Download the head revision via http://git.fibbs.org/?p=egw2fbox.git;a=snapshot;h=HEAD;sf=tgz
.PP
\&\s-1TBD\s0
.SH "CONFIG FILE"
.IX Header "CONFIG FILE"
This section describes the structure of the \s-1INI\s0 file used by this script.
.PP
The default value is 'egw2fbox.conf'.
.PP
The file name can be set via command line option '\-config /path/to/fileName.ini'.
.Sh "eGoupware section"
.IX Subsection "eGoupware section"
\&\s-1TBD\s0
.Sh "FritzBox section"
.IX Subsection "FritzBox section"
\&\s-1TBD\s0
.Sh "Round Cube section"
.IX Subsection "Round Cube section"
\&\s-1TBD\s0
.Sh "\s-1MUTT\s0 section"
.IX Subsection "MUTT section"
\&\s-1TBD\s0
.SH "TUTORIALS"
.IX Header "TUTORIALS"
A set of small tutorials for writing the supported client address books with data from Egroupware.
.Sh "Setting up the FritzBox address book"
.IX Subsection "Setting up the FritzBox address book"
\&\s-1TBD\s0
.Sh "Setting up the Round Cube address book"
.IX Subsection "Setting up the Round Cube address book"
\&\s-1TBD\s0
.Sh "Setting up the \s-1MUTT\s0 address book"
.IX Subsection "Setting up the MUTT address book"
\&\s-1TBD\s0
.SH "AUTHORS"
.IX Header "AUTHORS"
Christian Anton <mail@christiananton.de>
.PP
Kai Ellinger <coding@blicke.de>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\- Fritz Box router product family from \s-1AVM\s0 <http://www.avm.de/en/Produkte/FRITZBox/index.html>
.PP
\&\- FritzUploader to upload \s-1XML\s0 address books to a Fritz Box from Jan-Piet Mens <http://blog.fupps.com/2010/06/25/upload\-phonebook\-to\-a\-fritzbox\-from\-the\-command\-line>
.PP
\&\- Round Cube Web based mail client <http://roundcube.net>
.PP
\&\- \s-1MUTT\s0 command line mail client <http://www.mutt.org>
